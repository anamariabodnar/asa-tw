<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Exploits extends CI_Controller {

	private   $exploitdb_dir;     //directory where exploits are stored.
    protected $db;                // dbatabase connection object
    protected $header;            // Curl Header used only to debug
    protected $file;              // SPLFileInfo object with actual expĺoit file in proccess
    protected $log_file;          // file to logging all events 
    protected $preserv_log = 0;   // If 1: store logging  messages on $this->log_file
    protected $fh_log;            // Resource: The logfile handled by  (fopen)
    
    /**
     * Construct the class and doame Confs.
     */
    function __construct() {
        $this->exploitdb_dir = "./platforms/";
        $this->dbconnect('oracle'); //connect to database
        $this->log_file =  "exploitdb.log";
       
        if($this->preserv_log == 1) 
        {
            $this->fh_log = fopen($this->log_file, 'a+');
        } 
        //parent:: __construct();
    }

	public function index()
	{
		$this->load->view('pages/exploits');
	}

	public function login_to_continue()
	{
		$this->load->view('pages/login_to_continue');
	}
    
    /** destruction garbage collection  */
    function  destruct()
    {
        oci_close($this->db);
    }

    /**
     * Populate database from csv file that is updated weekly
     */
    function populate_db() {
        if (($handle = fopen("C:\\Apache24\\htdocs\\exploitdbAPI\\files.csv", "r")) !== FALSE) {
          while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
              if($data[6]='webapps'){
                $id = $data[0];
                $path = $data[1];
                $title = $data[2];
                $date = $data[3];
                $author = $data[4];
                $platform = $data[5];
                $this->insert_exploit($id, $path, $title, $date, $author, $platform);
              }
          }
          fclose($handle);
        }
    }

    /**
     * Verify if a exploit exists on database
     * @param  int $id : exploitdb id  to check 
     * @return True  if  exists this id on database
     */
    private function if_exists($id) {

        try {

            $sth = "SELECT ID FROM exploits WHERE id = :id";
            oci_bind_by_name($sth, ":id", $id, 200);
            $result = oci_parse($this->db, $sth);
            oci_execute($result);
            while ($row = oci_fetch_array($sth, OCI_RETURN_NULLS+OCI_ASSOC)) {
              foreach ($row as $item) {
                $resulted_obj = $row;
              }
            }

            if (is_object($resulted_obj)) {
                return true;
                $this->log($resulted_obj . " --- found");
            } else {
                return false;
                $this->log($resulted_obj . " --- not found");
            }
        } catch (PDOException $e) {
            $this->log("Error checking if a exploit exists:  " . $e->getMessage() );
            throw new Exception("Error checking if a exploit exists:  " . $e->getMessage(), 1);
        }
    }

    /**
     * Insert the exploit on database
     * The $obj is returned by getExploitInfo()
     * @param  StdClass $obj a Object contain 
     *     $obj->ID     : Id of Exploit on exploit0-db.com
     *     $obj->title  : The title of Exploit
     *     $obj->url    : URL to Exploit om exploit-db.com
     *     $obj->CVE    : The VCE data
     *     $obj->OSVDB  : OSVDB-ID of exploit
     *     $obj->author : Exploit  Author
     *     $obj->published : exploit published date
     *     $ojj->file   : path to exploit
     * @throws A Exception if fail 
     */
    private function insert_exploit($id, $path, $title, $created_at, $author, $platform) {

        try {
            $website = 2;
            $sql = "INSERT INTO exploits(
                  id,
                  path,
                  title,
                  created_at,
                  author, 
                  platform) VALUES (
                  :id,
                  :path,
                  :title,
                  to_date(:created_at,'YYYY-MM-DD'), 
                  :author,
                  :platform)";

            //$stmt = $this->db->prepare($sql);
            $result = oci_parse($this->db, $sql);
            oci_bind_by_name($result, ":id", $id, 200);
            oci_bind_by_name($result, ":path", $path, 200);
            oci_bind_by_name($result, ":title", $title, 200);
            //oci_bind_by_name($result, ":website", $website, 200);
            oci_bind_by_name($result, ":created_at", $created_at, 200);
            oci_bind_by_name($result, ":author", $author, 200);
            oci_bind_by_name($result, ":platform", $platform, 200);
            oci_execute($result);

        } catch (PDOException $e) {

           $this->log("Trying  to insert ". json_encode($obj) ." on DB " . $e->getMessage(), "Error:" );
        } catch (Exception $e) {

            $this->log("General Error  " . $e->getMessage() . "\n \t\t\t Debug: " .json_encode($e), "Critical:");
        }
    }

    /**
     * Auxiliary funciton to do a HTTP GET Request to a URL
     * @param  String $url URL to GeT
     * @return HTML string
     */
    private function request($url) {

        $curl = curl_init();
        // Set some options - we are passing in a useragent too here
        curl_setopt_array($curl, array(
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => "$url",
            CURLOPT_VERBOSE => 0,
            CURLOPT_HEADER => 1,
            CURLOPT_ENCODING => 1,
            CURLOPT_USERAGENT => 'Nstalker'
        ));

        // Send the request & save response to $resp
        $resp = curl_exec($curl);
        // Close request to clear up some resources
        $header_size = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
        $this->header = substr($response, 0, $header_size);
        curl_close($curl);
        return $resp;
    }

    /**
     * Make a connection to a database, and set it to $this->db
     * @param  String $dbtype String to select your prefered database
     */
    private function dbconnect($dbtype) {
        try {

            if ($dbtype == 'oracle') {
              $username = 'asa_user';

              // Oracle DB user password
              $password = 'asa_user';

              // Oracle DB connection string
              $connection_string = 'localhost/xe';

              //Connect to an Oracle database
              $this->db = oci_connect($username,
                                      $password,
                                      $connection_string
                                      );
              If (!$this->db)
                echo 'Connection failed';
              else
                echo 'Connection succesful';
            }
        } catch (PDOException $e) {

          $this->log('Error connecting database: '. $e->getMessage());

            die($e->getMessage() . "\n");
        }
    }

    /**
     * @session Search
     *functon to search  o database
     * */

    /**
    * Search  a Exploit by a CVE
    * @param    STRING $CVE CVE withot (CVE-) prefix only numbers like 2016-3714
    * @return   JSON   
    */
    public function byCVE($CVE)
    {

      try {

          (string) ($CVE);
          // $CVE = $this->treatCVE($CVE);

          $sth = "SELECT * FROM exploits WHERE CVE = :CVE";
          $sth->bindParam(':CVE', $CVE, PDO::PARAM_STR);

          $sth->execute();
          $result = $sth->fetchObject();


          if (is_object($result)) {

              return json_encode($result);
          } else {
              return ('{"Code":1, "text": "Not Found"}');
          }
      } catch (PDOException $e) {

          $this->log("Sear" . $e->getMessage() . "\n");
      }
    }
    
    /**
    * Search  a Exploit by Title
    * @param    STRING $pattern a pattern to search on title of exploit
    * @return   JSON   
    */
    
    public function byTitle($pattern)
    {

      try {

          (string) (trim(rtrim($pattern)));
          
          $sth = "SELECT * FROM exploits WHERE title LIKE '%$pattern%'";
          $result = oci_parse($this->db, $sth);
          oci_execute($result);
          oci_fetch_all($result, $resulted_obj);
           
          return json_encode($resulted_obj) ;

          
      } catch (PDOException $e) {

          die("erro busca:" . $e->getMessage() . "\n");
      }
    }
    //*** END of Search Session  ***/

    /**
     * Simle funtion to count how many exploits are on DB
     * @return INT 
     */
    public function CountExploit()
    {

      try {
           $this->statistics =  new stdClass();
            $sth = "SELECT count(id) as count FROM exploits";
            $result = oci_parse($this->db, $sth);
            oci_execute($result);
            while ($row = oci_fetch_array($result, OCI_RETURN_NULLS+OCI_ASSOC)) {
              foreach ($row as $item) {
                $resulted_obj = $row;
              }
            }
            if (is_object($resulted_obj)) {
                return $resulted_obj->count;
            } else {
                return false;
            }
        } catch (PDOException $e) {

            $this->log("$e->getMessage()", "Error");
                    
            die("Error: " . $e->getMessage() . "\n");
        }

    }

    /**
     * This is a simple function to log activities
     * @todo  integrate it with  unix syslog
     */
    public function log($message, $type = "info ") {
        
        $content = date("Y-m-d H:i:s") . " - " . $type . ": - " . $message . "\n";
        
        if($this->preserv_log == 1)
        {
            try {
                fwrite($this->fh_log, $content);
                
            } catch (Exception $ex) {
                echo "Error: ". $ex->getMessage()."\n";
            }
        }
        else{
        
            echo $content; 
            
        }
        
    }
}
?>